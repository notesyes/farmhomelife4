"use client";

import React, { useState, useMemo, useEffect, useRef } from 'react';
import DashboardHeader from '@/components/dashboard/DashboardHeader';
import DashboardSidebar from '@/components/dashboard/DashboardSidebar';

// Icons
import { PlusIcon, ClockIcon } from '@heroicons/react/24/outline';

// Utilities
import { format } from 'date-fns';

// Types
type SpeciesType = 'Chicken' | 'Duck' | 'Goose' | 'Turkey' | 'Quail';
type BatchStatus = 'incubating' | 'hatched' | 'failed' | 'completed';

interface IncompatibleBreedRule {
  reason: string;
  detailedExplanation: string;
  severity: 'warning' | 'error';
}

interface IncubationBatch {
  id: string;
  name: string;
  species: SpeciesType;
  breeds: string[];
  eggCount: number;
  startDate: string;
  expectedHatchDate: string;
  status: BatchStatus;
  notes: string;
  temperature?: number;
  humidity?: number;
}

export default function IncubationPage() {
  // State for delete confirmation modal
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deleteBatchId, setDeleteBatchId] = useState<string | null>(null);
  
  // State for complete confirmation modal
  const [showCompleteConfirm, setShowCompleteConfirm] = useState(false);
  const [completeBatchId, setCompleteBatchId] = useState<string | null>(null);
  
  // State for batches
  const [batches, setBatches] = useState<IncubationBatch[]>([]);
  
  // State for form visibility
  const [showForm, setShowForm] = useState(false);
  
  // State for edit mode
  const [editMode, setEditMode] = useState(false);
  const [editBatchId, setEditBatchId] = useState<string | null>(null);
  
  // State for selected species and breeds
  const [selectedSpecies, setSelectedSpecies] = useState<SpeciesType | ''>('');
  const [selectedBreeds, setSelectedBreeds] = useState<string[]>([]);
  const [compatibilityWarnings, setCompatibilityWarnings] = useState<string[]>([]);
  
  // Function to handle delete button click
  const handleDeleteButtonClick = (batchId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDeleteBatchId(batchId);
    setShowDeleteConfirm(true);
  };
  
  // Function to handle complete button click
  const handleCompleteButtonClick = (batchId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setCompleteBatchId(batchId);
    setShowCompleteConfirm(true);
  };
  
  // Function to handle delete batch confirmation
  const handleDeleteBatch = () => {
    if (deleteBatchId) {
      const newBatches = batches.filter(b => b.id !== deleteBatchId);
      setBatches(newBatches);
      localStorage.setItem('incubationBatches', JSON.stringify(newBatches));
      setShowDeleteConfirm(false);
      setDeleteBatchId(null);
    }
  };
  
  // Function to handle complete batch confirmation
  const handleCompleteBatch = () => {
    if (completeBatchId) {
      const newBatches = batches.map(b => 
        b.id === completeBatchId ? {...b, status: 'completed' as BatchStatus} : b
      );
      setBatches(newBatches);
      localStorage.setItem('incubationBatches', JSON.stringify(newBatches));
      setShowCompleteConfirm(false);
      setCompleteBatchId(null);
    }
  };
  
  // Component's return statement
  return (
    <div className="flex h-screen bg-gray-100">
      <DashboardSidebar />
      <div className="flex-1 overflow-auto">
        <DashboardHeader />
        <main className="p-6">
          <div className="mb-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-amber-800">Egg Batches</h2>
              <button
                onClick={() => setShowForm(true)}
                className="flex items-center px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors"
              >
                <PlusIcon className="w-5 h-5 mr-2" />
                Add New Batch
              </button>
            </div>
          </div>
          
          {/* Delete Confirmation Modal */}
          {showDeleteConfirm && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">Confirm Deletion</h3>
                <p className="text-gray-600 mb-6">Are you sure you want to delete this batch? This action cannot be undone.</p>
                <div className="flex justify-end space-x-3">
                  <button
                    onClick={() => {
                      setShowDeleteConfirm(false);
                      setDeleteBatchId(null);
                    }}
                    className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleDeleteBatch}
                    className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                  >
                    Delete
                  </button>
                </div>
              </div>
            </div>
          )}
          
          {/* Complete Confirmation Modal */}
          {showCompleteConfirm && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">Confirm Completion</h3>
                <p className="text-gray-600 mb-6">Mark this batch as completed? This will move it to the completed state.</p>
                <div className="flex justify-end space-x-3">
                  <button
                    onClick={() => {
                      setShowCompleteConfirm(false);
                      setCompleteBatchId(null);
                    }}
                    className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleCompleteBatch}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    Complete
                  </button>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
}
