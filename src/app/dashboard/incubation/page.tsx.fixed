"use client";

import React, { useState, useMemo } from 'react';
import DashboardHeader from '@/components/dashboard/DashboardHeader';
import DashboardSidebar from '@/components/dashboard/DashboardSidebar';

// Icons
import { PlusIcon, ClockIcon } from '@heroicons/react/24/outline';

// Utilities
import { format } from 'date-fns';

// Types
type SpeciesType = 'Chicken' | 'Duck' | 'Goose' | 'Turkey' | 'Quail';
type BatchStatus = 'incubating' | 'hatched' | 'failed';
// Commented out until implemented
// type TemperatureUnit = 'F' | 'C';
// Unused types kept for future implementation
// type ActionType = 'turned' | 'candled';

// Commented out until implemented
/* interface SpeciesInfo {
  incubationDays: number;
  temp: number;
  humidity: number;
  varieties: string[];
} */

interface EggBatch {
  id: string;
  batchName: string;
  startDate: string;
  species: SpeciesType;
  varieties: string[];
  eggCount: number;
  notes: string;
  status: BatchStatus;
  temperature: number;
  humidity: number;
  expectedHatchDate: string;
  daysRemaining: number;
  lastTurned: string;
  lastCandled: string;
}

// Commented out until implemented
/* interface BreedRequirement {
  temp: number;
  humidity: number;
  reason: string;
} */

interface IncompatibleBreedRule {
  reason: string;
  detailedExplanation: string;
  severity: 'warning' | 'error';
  canMix: boolean;
  recommendation: string;
}

interface CompatibilityWarning {
  id: string;
  breeds: string[];
  reason: string;
  severity: 'warning' | 'error';
  recommendation: string;
  detailedExplanation: string;
  showDetails: boolean;
}

// Commented out until implemented
/* interface FormData {
  batchName: string;
  startDate: string;
  species: SpeciesType | '';
  varieties: string[];
  eggCount: string;
  temperature: number;
  humidity: number;
  notes: string;
}
*/

export default function IncubationPage() {
  // Incompatible breed rules database
  const incompatibleBreeds = useMemo<Record<string, IncompatibleBreedRule>>(() => ({
    // Chicken compatibility rules
    "Silkie-Standard": {
      reason: "Different humidity requirements",
      detailedExplanation: "Silkie eggs benefit from higher humidity throughout incubation due to their unique genetic characteristics.",
      severity: "warning",
      canMix: true,
      recommendation: "Consider using a humidity chamber for Silkie eggs"
    },
    "Bantam-Standard": {
      reason: "Size difference affects incubation",
      detailedExplanation: "Bantam eggs are significantly smaller than standard breed eggs and may develop faster or be affected by air circulation differently.",
      severity: "warning",
      canMix: true,
      recommendation: "Place bantam eggs in a separate section or tray"
    },
    "Brahma-Leghorn": {
      reason: "Different incubation periods",
      detailedExplanation: "Brahma eggs typically take 1-2 days longer to hatch than Leghorn eggs.",
      severity: "warning",
      canMix: true,
      recommendation: "Consider staggering the start dates"
    },
    "Silkie-Brahma": {
      reason: "Significantly different humidity and temperature needs",
      detailedExplanation: "These breeds have evolved in very different environments and have different shell porosity and embryo development needs.",
      severity: "error",
      canMix: false,
      recommendation: "Do not incubate these breeds together"
    },
    "Jersey Giant-Bantam": {
      reason: "Extreme size difference",
      detailedExplanation: "Jersey Giants produce much larger eggs than Bantams, which can lead to uneven heat distribution and airflow issues.",
      severity: "error",
      canMix: false,
      recommendation: "Incubate separately with appropriate settings for each"
    },
    
    // Duck compatibility rules
    "Muscovy-Pekin": {
      reason: "Different humidity preferences",
      detailedExplanation: "Muscovy ducks are adapted to drier conditions and their eggs do better with lower humidity than other duck breeds.",
      severity: "warning",
      canMix: true,
      recommendation: "Consider using a humidity chamber for Muscovy eggs"
    },
    
    // Quail compatibility rules
    "Coturnix-Bobwhite": {
      reason: "Different incubation periods",
      detailedExplanation: "Coturnix quail eggs hatch in 17-18 days while Bobwhite quail eggs take 23-24 days.",
      severity: "error",
      canMix: false,
      recommendation: "Incubate separately with appropriate timing"
    }
  }), []);
  
  // Species data for default temperature and humidity settings
  const speciesData = useMemo(() => ({
    "Chicken": {
      temp: 99.5,
      humidity: 55,
      incubationDays: 21,
      varieties: [
        "Silkie", "Brahma", "Leghorn", "Rhode Island Red", "Plymouth Rock", 
        "Orpington", "Wyandotte", "Jersey Giant", "Bantam", "Standard"
      ]
    },
    "Duck": {
      temp: 99.5,
      humidity: 65,
      incubationDays: 28,
      varieties: [
        "Pekin", "Muscovy", "Mallard", "Rouen", "Runner", 
        "Khaki Campbell", "Cayuga", "Swedish", "Magpie", "Call"
      ]
    },
    "Goose": {
      temp: 99.5,
      humidity: 65,
      incubationDays: 30,
      varieties: [
        "Toulouse", "Embden", "African", "Chinese", "Pilgrim", 
        "Sebastopol", "American Buff", "Egyptian", "Roman", "Pomeranian"
      ]
    },
    "Turkey": {
      temp: 99.5,
      humidity: 60,
      incubationDays: 28,
      varieties: [
        "Broad Breasted White", "Broad Breasted Bronze", "Bourbon Red", "Narragansett", "Royal Palm", 
        "Black Spanish", "Blue Slate", "Midget White", "Beltsville Small White", "Standard Bronze"
      ]
    },
    "Quail": {
      temp: 99.5,
      humidity: 55,
      incubationDays: 18,
      varieties: [
        "Coturnix", "Bobwhite", "Button", "California", "Gambel's", 
        "Mountain", "Japanese", "Texas A&M", "Jumbo Brown", "Tibetan"
      ]
    }
  }), []);
  
  // Sample batches data
  const [batches, setBatches] = useState<EggBatch[]>([
    {
      id: "batch-1",
      batchName: "Spring Chickens 2025",
      startDate: "2025-05-15T00:00:00",
      species: "Chicken",
      varieties: ["Rhode Island Red", "Plymouth Rock"],
      eggCount: 12,
      notes: "First batch of the season, from our best layers.",
      status: "incubating",
      temperature: 99.5,
      humidity: 55,
      expectedHatchDate: "2025-06-05T00:00:00",
      daysRemaining: 21,
      lastTurned: "2025-05-25T08:00:00",
      lastCandled: "2025-05-20T10:00:00"
    },
    {
      id: "batch-2",
      batchName: "Quail Experiment",
      startDate: "2025-05-20T00:00:00",
      species: "Quail",
      varieties: ["Coturnix"],
      eggCount: 24,
      notes: "Testing higher humidity for better hatch rates.",
      status: "incubating",
      temperature: 99.5,
      humidity: 60,
      expectedHatchDate: "2025-06-07T00:00:00",
      daysRemaining: 16,
      lastTurned: "2025-05-25T08:30:00",
      lastCandled: "2025-05-25T10:15:00"
    }
  ]);

  // State for showing/hiding the add form
  const [showAddForm, setShowAddForm] = useState(false);
  const [selectedSpecies, setSelectedSpecies] = useState<SpeciesType | ''>('');
  const [selectedBreeds, setSelectedBreeds] = useState<string[]>([]);
  const [compatibilityWarnings, setCompatibilityWarnings] = useState<CompatibilityWarning[]>([]);
  const [temperature, setTemperature] = useState<number>(99.5);
  const [humidity, setHumidity] = useState<number>(55);
  // const [temperatureUnit, setTemperatureUnit] = useState<TemperatureUnit>("F");
  
  // Form state - commented out until form implementation is complete
  /* const [formData, setFormData] = useState<FormData>({
    batchName: "",
    startDate: format(new Date(), "yyyy-MM-dd"),
    species: "",
    varieties: [],
    eggCount: "",
    temperature: 99.5,
    humidity: 55,
    notes: ""
  }); */

  return (
    <div className="flex h-screen bg-gray-100">
      <DashboardSidebar />
      
      <div className="flex-1 flex flex-col overflow-hidden">
        <DashboardHeader />
        
        <main className="flex-1 overflow-y-auto bg-gradient-to-br from-amber-50 to-orange-100 p-4 md:p-6">
          <div className="max-w-7xl mx-auto">
            <div className="bg-white bg-opacity-95 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white border-opacity-20 mb-6">
              <h1 className="text-3xl font-bold text-amber-700 flex items-center gap-3 mb-2">
                <span className="text-4xl">ðŸ¥š</span> Egg Incubation Management
              </h1>
              <p className="text-amber-800">
                Track and manage your egg batches, monitor incubation progress, and record important events.
              </p>
              <div className="mt-4">
                <button
                  onClick={() => setShowAddForm(true)}
                  className="bg-gradient-to-r from-amber-600 to-amber-500 text-white px-4 py-2 rounded-lg shadow-md flex items-center hover:translate-y-[-2px] hover:shadow-lg transition duration-300"
                >
                  <PlusIcon className="h-5 w-5 mr-1" />
                  Add New Batch
                </button>
              </div>
            </div>
            
            {showAddForm && (
              <div className="bg-white bg-opacity-95 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white border-opacity-20 mb-6">
                <h2 className="text-xl font-semibold text-amber-700 mb-4">Add New Batch</h2>
                
                {compatibilityWarnings.length > 0 && (
                  <div className="mb-6">
                    <h3 className="text-lg font-medium text-amber-700 mb-2">Compatibility Warnings</h3>
                    <div className="space-y-3">
                      {compatibilityWarnings.map(warning => (
                        <div 
                          key={warning.id}
                          className={`p-4 rounded-lg ${
                            warning.severity === 'error' 
                              ? 'bg-red-50 border border-red-200' 
                              : 'bg-amber-50 border border-amber-200'
                          }`}
                        >
                          <div className="flex items-start">
                            <div className={`p-1 rounded-full ${
                              warning.severity === 'error' ? 'bg-red-100' : 'bg-amber-100'
                            } mr-3`}>
                              {warning.severity === 'error' ? (
                                <svg className="h-5 w-5 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                </svg>
                              ) : (
                                <svg className="h-5 w-5 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                </svg>
                              )}
                            </div>
                            <div className="flex-1">
                              <p className={`font-medium ${
                                warning.severity === 'error' ? 'text-red-800' : 'text-amber-800'
                              }`}>
                                {warning.breeds.join(' + ')}: {warning.reason}
                              </p>
                              <p className={`text-sm ${
                                warning.severity === 'error' ? 'text-red-600' : 'text-amber-600'
                              }`}>
                                {warning.recommendation}
                              </p>
                                <button
                                  type="button"
                                  className="mt-2 px-3 py-1 text-sm font-medium bg-amber-100 hover:bg-amber-200 text-amber-800 rounded-md border border-amber-300 shadow-sm transition-all focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-opacity-50"
                                  onClick={() => {
                                    setCompatibilityWarnings(warnings => 
                                      warnings.map(w => 
                                        w.id === warning.id 
                                          ? {...w, showDetails: !w.showDetails} 
                                          : w
                                      )
                                    );
                                  }}
                                >
                                  {warning.showDetails ? 'â†‘ Hide details' : 'â†“ Show details'}
                                </button>
                                {warning.showDetails && (
                                  <p className="mt-1 text-xs text-gray-600">
                                    {warning.detailedExplanation}
                                  </p>
                                )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                <form className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-amber-700 mb-1">Batch Name</label>
                    <input 
                      type="text" 
                      className="w-full px-3 py-2 border border-amber-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition bg-white text-amber-900" 
                      placeholder="Spring Chickens 2025"
                    />
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-amber-700 mb-1">Species</label>
                      <select 
                        className="w-full px-3 py-2 border border-amber-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition bg-white text-amber-900"
                        value={selectedSpecies}
                        onChange={(e) => {
                          const species = e.target.value as SpeciesType | '';
                          setSelectedSpecies(species);
                          setSelectedBreeds([]);
                          
                          // Automatically set temperature and humidity based on species
                          if (species && speciesData[species]) {
                            setTemperature(speciesData[species].temp);
                            setHumidity(speciesData[species].humidity);
                          }
                        }}
                      >
                        <option value="">Select Species</option>
                        <option value="Chicken">Chicken</option>
                        <option value="Duck">Duck</option>
                        <option value="Goose">Goose</option>
                        <option value="Turkey">Turkey</option>
                        <option value="Quail">Quail</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-amber-700 mb-1">Egg Count</label>
                      <input 
                        type="number" 
                        min="1"
                        className="w-full px-3 py-2 border border-amber-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition bg-white text-amber-900" 
                        placeholder="24"
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-amber-700 mb-1">Start Date</label>
                    <input 
                      type="date" 
                      className="w-full px-3 py-2 border border-amber-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition bg-white text-amber-900" 
                      defaultValue={format(new Date(), 'yyyy-MM-dd')}
                    />
                  </div>
                  
                  {selectedSpecies && (
                    <div>
                      <label className="block text-sm font-medium text-amber-700 mb-1">Breeds/Varieties</label>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                        {speciesData[selectedSpecies].varieties.map(variety => (
                          <div key={variety} className="flex items-center">
                            <input
                              type="checkbox"
                              id={`variety-${variety}`}
                              checked={selectedBreeds.includes(variety)}
                              onChange={(e) => {
                                if (e.target.checked) {
                                  // Add the breed
                                  const newBreeds = [...selectedBreeds, variety];
                                  setSelectedBreeds(newBreeds);
                                  
                                  // Check for compatibility issues
                                  const newWarnings: CompatibilityWarning[] = [];
                                  
                                  // Check each pair of breeds
                                  for (let i = 0; i < newBreeds.length; i++) {
                                    for (let j = i + 1; j < newBreeds.length; j++) {
                                      const breed1 = newBreeds[i];
                                      const breed2 = newBreeds[j];
                                      
                                      // Check both orders of the pair
                                      const key1 = `${breed1}-${breed2}`;
                                      const key2 = `${breed2}-${breed1}`;
                                      
                                      if (incompatibleBreeds[key1] || incompatibleBreeds[key2]) {
                                        const rule = incompatibleBreeds[key1] || incompatibleBreeds[key2];
                                        
                                        newWarnings.push({
                                          id: `${key1}-${Date.now()}`,
                                          breeds: [breed1, breed2],
                                          reason: rule.reason,
                                          severity: rule.severity,
                                          recommendation: rule.recommendation,
                                          detailedExplanation: rule.detailedExplanation,
                                          showDetails: false
                                        });
                                      }
                                    }
                                  }
                                  
                                  if (newWarnings.length > 0) {
                                    setCompatibilityWarnings(prev => {
                                      // Filter out any warnings that involve the current breeds
                                      const filtered = prev.filter(w => {
                                        return !w.breeds.includes(variety);
                                      });
                                      
                                      return [...filtered, ...newWarnings];
                                    });
                                  }
                                } else {
                                  // Remove the breed
                                  setSelectedBreeds(prev => prev.filter(b => b !== variety));
                                  
                                  // Remove any warnings involving this breed
                                  setCompatibilityWarnings(prev => 
                                    prev.filter(w => !w.breeds.includes(variety))
                                  );
                                }
                              }}
                              className="mr-2"
                            />
                            <label htmlFor={`variety-${variety}`} className="text-sm text-amber-800">
                              {variety}
                            </label>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-amber-700 mb-1">Temperature (Â°F)</label>
                      <input 
                        type="number" 
                        step="0.1"
                        value={temperature}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTemperature(parseFloat(e.target.value))}
                        className="w-full px-3 py-2 border border-amber-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition bg-white text-amber-900" 
                        placeholder="99.5"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-amber-700 mb-1">Humidity (%)</label>
                      <input 
                        type="number" 
                        value={humidity}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setHumidity(parseFloat(e.target.value))}
                        className="w-full px-3 py-2 border border-amber-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition bg-white text-amber-900" 
                        placeholder="55"
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-amber-700 mb-1">Notes</label>
                    <textarea 
                      rows={3}
                      className="w-full px-3 py-2 border border-amber-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition bg-white text-amber-900" 
                      placeholder="Any special notes about this batch..."
                    ></textarea>
                  </div>
                  <div className="flex justify-end space-x-3 pt-2">
                    <button 
                      type="button"
                      onClick={() => setShowAddForm(false)}
                      className="px-4 py-2 border border-amber-300 rounded-lg text-amber-700 hover:bg-amber-50 transition duration-300"
                    >
                      Cancel
                    </button>
                    <button 
                      type="button"
                      className="px-4 py-2 bg-gradient-to-r from-amber-600 to-amber-500 text-white rounded-lg shadow-md hover:translate-y-[-2px] hover:shadow-lg transition duration-300"
                      onClick={() => {
                        alert('This feature is not fully implemented yet!');
                        setShowAddForm(false);
                      }}
                    >
                      Save Batch
                    </button>
                  </div>
                </form>
              </div>
            )}
            
            {batches.map(batch => (
              <div key={batch.id} className="bg-white bg-opacity-90 backdrop-blur-sm rounded-2xl shadow-lg border border-white border-opacity-30 overflow-hidden mb-4">
                <div className="p-6">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-lg font-semibold text-amber-700">{batch.batchName}</h3>
                      <p className="text-amber-600">{batch.species} â€¢ {batch.eggCount} eggs</p>
                    </div>
                  </div>
                  
                  <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <p className="text-sm text-amber-600">Start Date</p>
                      <p className="font-medium text-amber-900">{format(new Date(batch.startDate), 'MMM d, yyyy')}</p>
                    </div>
                    <div>
                      <p className="text-sm text-amber-600">Expected Hatch</p>
                      <p className="font-medium text-amber-900">{format(new Date(batch.expectedHatchDate), 'MMM d, yyyy')}</p>
                    </div>
                    <div>
                      <p className="text-sm text-amber-600">Temperature</p>
                      <p className="font-medium text-amber-900">{batch.temperature}Â°F</p>
                    </div>
                    <div>
                      <p className="text-sm text-amber-600">Humidity</p>
                      <p className="font-medium text-amber-900">{batch.humidity}%</p>
                    </div>
                  </div>
                  
                  {batch.status === 'incubating' && (
                    <div className="mt-4 bg-amber-50 p-3 rounded-lg border border-amber-200 flex items-center">
                      <ClockIcon className="h-5 w-5 text-amber-600 mr-2" />
                      <div>
                        <p className="text-amber-700 font-medium">
                          {batch.daysRemaining} days remaining
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </main>
      </div>
    </div>
  );
}
