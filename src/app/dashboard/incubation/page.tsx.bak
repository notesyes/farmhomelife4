"use client";

import React, { useState, useMemo, useEffect, useRef } from 'react';
import DashboardHeader from '@/components/dashboard/DashboardHeader';
import DashboardSidebar from '@/components/dashboard/DashboardSidebar';

// Icons
import { PlusIcon, ClockIcon } from '@heroicons/react/24/outline';

// Utilities
import { format } from 'date-fns';

// Types
type SpeciesType = 'Chicken' | 'Duck' | 'Goose' | 'Turkey' | 'Quail';
type BatchStatus = 'incubating' | 'hatched' | 'failed' | 'completed';
// Commented out until implemented
// type TemperatureUnit = 'F' | 'C';
// Unused types kept for future implementation
// type ActionType = 'turned' | 'candled';

// Commented out until implemented
/* interface SpeciesInfo {
  incubationDays: number;
  temp: number;
  humidity: number;
  varieties: string[];
} */

interface EggBatch {
  id: string;
  batchName: string;
  startDate: string;
  species: SpeciesType;
  varieties: string[];
  eggCount: number;
  notes: string;
  status: BatchStatus;
  temperature: number;
  humidity: number;
  expectedHatchDate: string;
  daysRemaining: number;
  daysElapsed?: number;
  lastTurned: string;
  lastCandled: string;
  alerts?: IncubationAlert[];
}

interface IncubationAlert {
  id: string;
  type: 'turning' | 'lockdown' | 'hatch';
  message: string;
  date: string;
  acknowledged: boolean;
}

// Commented out until implemented
/* interface BreedRequirement {
  temp: number;
  humidity: number;
  reason: string;
} */

interface IncompatibleBreedRule {
  reason: string;
  detailedExplanation: string;
  severity: 'warning' | 'error';
  canMix: boolean;
  recommendation: string;
}

interface CompatibilityWarning {
  id: string;
  pair: string; // Added for display purposes
  breeds: string[];
  reason: string;
  severity: 'warning' | 'error';
  recommendation: string;
  detailedExplanation: string;
  showDetails: boolean;
}

// Commented out until implemented
/* interface FormData {
  batchName: string;
  startDate: string;
  species: SpeciesType | '';
  varieties: string[];
  eggCount: string;
  temperature: number;
  humidity: number;
  notes: string;
}
*/

export default function IncubationPage() {
  // State for delete confirmation modal
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [deleteBatchId, setDeleteBatchId] = useState<string | null>(null);

  // State for complete confirmation modal
  const [showCompleteConfirm, setShowCompleteConfirm] = useState(false);
  const [completeBatchId, setCompleteBatchId] = useState<string | null>(null);
  
  // Handlers for delete and complete button clicks
  const handleDeleteButtonClick = (batchId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDeleteBatchId(batchId);
    setShowDeleteConfirm(true);
  };
  
  const handleCompleteButtonClick = (batchId: string, e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setCompleteBatchId(batchId);
    setShowCompleteConfirm(true);
  };
  // Incompatible breed rules database - used to check compatibility between breeds
  const breedCompatibilityRules = useMemo<Record<string, IncompatibleBreedRule>>(() => ({
    // Chicken compatibility rules
    "Silkie-Standard": {
      reason: "Different humidity requirements",
      detailedExplanation: "Silkie eggs benefit from higher humidity throughout incubation due to their unique genetic characteristics.",
      severity: "warning",
      canMix: true,
      recommendation: "Consider using a humidity chamber for Silkie eggs"
    },
    "Bantam-Standard": {
      reason: "Size difference affects incubation",
      detailedExplanation: "Bantam eggs are significantly smaller than standard breed eggs and may develop faster or be affected by air circulation differently.",
      severity: "warning",
      canMix: true,
      recommendation: "Place bantam eggs in a separate section or tray"
    },
    "Brahma-Leghorn": {
      reason: "Different incubation periods",
      detailedExplanation: "Brahma eggs typically take 1-2 days longer to hatch than Leghorn eggs.",
      severity: "warning",
      canMix: true,
      recommendation: "Consider staggering the start dates"
    },
    "Silkie-Brahma": {
      reason: "Significantly different humidity and temperature needs",
      detailedExplanation: "These breeds have evolved in very different environments and have different shell porosity and embryo development needs.",
      severity: "error",
      canMix: false,
      recommendation: "Do not incubate these breeds together"
    },
    "Jersey Giant-Bantam": {
      reason: "Extreme size difference",
      detailedExplanation: "Jersey Giants produce much larger eggs than Bantams, which can lead to uneven heat distribution and airflow issues.",
      severity: "error",
      canMix: false,
      recommendation: "Incubate separately with appropriate settings for each"
    },
    
    // Duck compatibility rules
    "Muscovy-Pekin": {
      reason: "Different humidity preferences",
      detailedExplanation: "Muscovy ducks are adapted to drier conditions and their eggs do better with lower humidity than other duck breeds.",
      severity: "warning",
      canMix: true,
      recommendation: "Consider using a humidity chamber for Muscovy eggs"
    },
    
    // Quail compatibility rules
    "Coturnix-Bobwhite": {
      reason: "Different incubation periods",
      detailedExplanation: "Coturnix quail eggs hatch in 17-18 days while Bobwhite quail eggs take 23-24 days.",
      severity: "error",
      canMix: false,
      recommendation: "Incubate separately with appropriate timing"
    }
  }), []);
  
  // Species data for default temperature and humidity settings
  const speciesData = useMemo(() => ({
    "Chicken": {
      temp: 99.5,
      humidity: 55,
      incubationDays: 21,
      varieties: [
        "Silkie", "Brahma", "Leghorn", "Rhode Island Red", "Plymouth Rock", 
        "Orpington", "Wyandotte", "Jersey Giant", "Bantam", "Standard"
      ]
    },
    "Duck": {
      temp: 99.5,
      humidity: 65,
      incubationDays: 28,
      varieties: [
        "Pekin", "Muscovy", "Mallard", "Rouen", "Runner", 
        "Khaki Campbell", "Cayuga", "Swedish", "Magpie", "Call"
      ]
    },
    "Goose": {
      temp: 99.5,
      humidity: 65,
      incubationDays: 30,
      varieties: [
        "Toulouse", "Embden", "African", "Chinese", "Pilgrim", 
        "Sebastopol", "American Buff", "Egyptian", "Roman", "Pomeranian"
      ]
    },
    "Turkey": {
      temp: 99.5,
      humidity: 60,
      incubationDays: 28,
      varieties: [
        "Broad Breasted White", "Broad Breasted Bronze", "Bourbon Red", "Narragansett", "Royal Palm", 
        "Black Spanish", "Blue Slate", "Midget White", "Beltsville Small White", "Standard Bronze"
      ]
    },
    "Quail": {
      temp: 99.5,
      humidity: 55,
      incubationDays: 18,
      varieties: [
        "Coturnix", "Bobwhite", "Button", "California", "Gambel's", 
        "Mountain", "Japanese", "Texas A&M", "Jumbo Brown", "Tibetan"
      ]
    }
  }), []);
  
  // Load batches from localStorage or use sample data if none exists
  const [batches, setBatches] = useState<EggBatch[]>(() => {
    // Check if we're in the browser environment
    if (typeof window !== 'undefined') {
      const savedBatches = localStorage.getItem('incubationBatches');
      if (savedBatches) {
        try {
          return JSON.parse(savedBatches);
        } catch (e) {
          console.error('Error parsing saved batches:', e);
        }
      }
    }
    
    // Default sample data if no saved batches
    return [
      {
        id: "batch-1",
        batchName: "Spring Chickens 2025",
        startDate: "2025-05-15T00:00:00",
        species: "Chicken",
        varieties: ["Rhode Island Red", "Plymouth Rock"],
        eggCount: 12,
        notes: "First batch of the season, from our best layers.",
        status: "incubating",
        temperature: 99.5,
        humidity: 55,
        expectedHatchDate: "2025-06-05T00:00:00",
        daysRemaining: 21,
        lastTurned: "2025-05-25T08:00:00",
        lastCandled: "2025-05-20T10:00:00"
      },
      {
        id: "batch-2",
        batchName: "Quail Experiment",
        startDate: "2025-05-20T00:00:00",
        species: "Quail",
        varieties: ["Coturnix"],
        eggCount: 24,
        notes: "Testing higher humidity for better hatch rates.",
        status: "incubating",
        temperature: 99.5,
        humidity: 60,
        expectedHatchDate: "2025-06-07T00:00:00",
        daysRemaining: 16,
        lastTurned: "2025-05-25T08:30:00",
        lastCandled: "2025-05-25T10:15:00"
      }
    ];
  });

  // State for showing/hiding the add form and edit form
  const [showAddForm, setShowAddForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [editingBatch, setEditingBatch] = useState<EggBatch | null>(null);
  const [selectedSpecies, setSelectedSpecies] = useState<SpeciesType>('Chicken');
  const [selectedBreeds, setSelectedBreeds] = useState<string[]>([]);
  const [compatibilityWarnings, setCompatibilityWarnings] = useState<CompatibilityWarning[]>([]);
  const [temperature, setTemperature] = useState<number>(99.5);
  const [humidity, setHumidity] = useState<number>(55);
  const [batchName, setBatchName] = useState<string>('');
  const [eggCount, setEggCount] = useState<string>('');
  const [startDate, setStartDate] = useState<string>(format(new Date(), 'yyyy-MM-dd'));
  const [notes, setNotes] = useState<string>('');
  
  // Reference to batches to prevent infinite update loops
  const batchesRef = useRef<EggBatch[]>(batches);
  // const [temperatureUnit, setTemperatureUnit] = useState<TemperatureUnit>("F");
  
  // Form state - commented out until form implementation is complete
  /* const [formData, setFormData] = useState<FormData>({
    batchName: "",
    startDate: format(new Date(), "yyyy-MM-dd"),
    species: "",
    varieties: [],
    eggCount: "",
    temperature: 99.5,
    humidity: 55,
    notes: ""
  }); */
  
  // Helper function to check if two dates are the same day
  function isSameDay(date1: Date, date2: Date): boolean {
    return (
      date1.getFullYear() === date2.getFullYear() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getDate() === date2.getDate()
    );
  }
  
  // Function to check compatibility between selected breeds
  const checkBreedCompatibility = useEffect(() => {
    if (selectedBreeds.length < 2) {
      setCompatibilityWarnings([]);
      return;
    }
    
    const newWarnings: CompatibilityWarning[] = [];
    
    // Check each pair of breeds for compatibility issues
    for (let i = 0; i < selectedBreeds.length; i++) {
      for (let j = i + 1; j < selectedBreeds.length; j++) {
        const breed1 = selectedBreeds[i];
        const breed2 = selectedBreeds[j];
        
        // Check if this pair has a compatibility rule
        const pairKey1 = `${breed1}-${breed2}`;
        const pairKey2 = `${breed2}-${breed1}`;
        
        const rule = breedCompatibilityRules[pairKey1] || breedCompatibilityRules[pairKey2];
        
        if (rule) {
          newWarnings.push({
            id: `${breed1}-${breed2}-${Date.now()}`,
            pair: `${breed1} + ${breed2}`,
            breeds: [breed1, breed2],
            reason: rule.reason,
            severity: rule.severity,
            recommendation: rule.recommendation,
            detailedExplanation: rule.detailedExplanation,
            showDetails: false
          });
        }
      }
    }
    
    setCompatibilityWarnings(newWarnings);
  }, [selectedBreeds, breedCompatibilityRules]);
  
  // Function to generate alerts for a batch - wrapped in useMemo to maintain referential stability
  const calculateBatchAlerts = useMemo(() => (batch: EggBatch): IncubationAlert[] => {
    if (batch.status !== 'incubating') return [];
    
    const today = new Date();
    const speciesData = {
      "Chicken": { days: 21, turnUntil: 18 },
      "Duck": { days: 28, turnUntil: 25 },
      "Goose": { days: 30, turnUntil: 27 },
      "Turkey": { days: 28, turnUntil: 25 },
      "Quail": { days: 18, turnUntil: 15 }
    };
    
    const totalDays = speciesData[batch.species]?.days || 21;
    const turnUntilDay = speciesData[batch.species]?.turnUntil || 18;
    const startDateObj = new Date(batch.startDate);
    // Calculate days elapsed for alert logic
    const daysElapsed = Math.floor((today.getTime() - startDateObj.getTime()) / (1000 * 60 * 60 * 24));
    
    // Calculate important dates
    const turnEndDate = new Date(startDateObj);
    turnEndDate.setDate(startDateObj.getDate() + turnUntilDay);
    
    const lockdownDate = new Date(startDateObj);
    lockdownDate.setDate(startDateObj.getDate() + totalDays - 3);
    
    const hatchDate = new Date(startDateObj);
    hatchDate.setDate(startDateObj.getDate() + totalDays);
    
    // Create alerts for upcoming or current events
    const newAlerts: IncubationAlert[] = [];
    
    // Check for turning end alert (1 day before)
    const dayBeforeTurnEnd = new Date(turnEndDate);
    dayBeforeTurnEnd.setDate(turnEndDate.getDate() - 1);
    
    // Use daysElapsed to determine if we're at the turning end date
    if (isSameDay(today, dayBeforeTurnEnd) || daysElapsed === turnUntilDay - 1) {
      newAlerts.push({
        id: `${batch.id}-turning-${today.toISOString().split('T')[0]}`,
        type: 'turning',
        message: `TURNING ALERT: Stop turning eggs tomorrow for ${batch.batchName}`,
        date: format(turnEndDate, 'yyyy-MM-dd'),
        acknowledged: false
      });
    }
    
    // Check for lockdown alert
    if (isSameDay(today, lockdownDate) || daysElapsed === totalDays - 3) {
      newAlerts.push({
        id: `${batch.id}-lockdown-${today.toISOString().split('T')[0]}`,
        type: 'lockdown',
        message: `LOCKDOWN ALERT: Begin lockdown today for ${batch.batchName}. Stop turning and increase humidity.`,
        date: format(lockdownDate, 'yyyy-MM-dd'),
        acknowledged: false
      });
    }
    
    // Check for hatch day alert
    if (isSameDay(today, hatchDate) || daysElapsed === totalDays) {
      newAlerts.push({
        id: `${batch.id}-hatch-${today.toISOString().split('T')[0]}`,
        type: 'hatch',
        message: `HATCH DAY ALERT: ${batch.batchName} is due to hatch today!`,
        date: format(hatchDate, 'yyyy-MM-dd'),
        acknowledged: false
      });
    }
    
    // Check for one day before hatch alert
    const dayBeforeHatch = new Date(hatchDate);
    dayBeforeHatch.setDate(hatchDate.getDate() - 1);
    
    if (isSameDay(today, dayBeforeHatch) || daysElapsed === totalDays - 1) {
      newAlerts.push({
        id: `${batch.id}-prehatch-${today.toISOString().split('T')[0]}`,
        type: 'hatch',
        message: `PRE-HATCH ALERT: ${batch.batchName} is due to hatch tomorrow! Ensure humidity is high.`,
        date: format(dayBeforeHatch, 'yyyy-MM-dd'),
        acknowledged: false
      });
    }
    
    return newAlerts;
  }, []);
  
  // Update the ref whenever batches changes and save to localStorage
  useEffect(() => {
    batchesRef.current = batches;
    
    // Save to localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem('incubationBatches', JSON.stringify(batches));
    }
  }, [batches]);
  
  // Recalculate days remaining for each batch on page load and every day
  useEffect(() => {
    const updateDaysRemaining = () => {
      // Use a fixed date for consistent calculations across the component
      const today = new Date();
      const currentBatches = batchesRef.current; // Use the ref to avoid dependency issues
      
      if (!currentBatches) return; // Guard against null ref
      
      const updatedBatches = currentBatches.map(batch => {
        if (batch.status !== 'incubating') return batch;
        
        const speciesData = {
          "Chicken": { days: 21, turnUntil: 18 },
          "Duck": { days: 28, turnUntil: 25 },
          "Goose": { days: 30, turnUntil: 27 },
          "Turkey": { days: 28, turnUntil: 25 },
          "Quail": { days: 18, turnUntil: 15 }
        };
        
        const totalDays = speciesData[batch.species]?.days || 21;
        const startDate = new Date(batch.startDate);
        const expectedHatchDate = new Date(startDate);
        expectedHatchDate.setDate(startDate.getDate() + totalDays);
        
        // Calculate days elapsed since start
        const daysElapsed = Math.min(
          totalDays,
          Math.max(0, Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)))
        );
        
        // Calculate days remaining until hatch
        const daysRemaining = Math.max(0, Math.floor((expectedHatchDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)));
        
        return {
          ...batch,
          daysElapsed,
          daysRemaining
        };
      });
      
      setBatches(updatedBatches);
      // Don't save to localStorage here since that will happen in the other useEffect
    };
    
    // Call the function immediately
    updateDaysRemaining();
    
    // Set up a daily interval to update days remaining
    const intervalId = setInterval(updateDaysRemaining, 1000 * 60 * 60 * 24);
    
    // Clean up interval on unmount
    return () => clearInterval(intervalId);
  }, []); // Empty dependency array to run only on mount

// ...

// Handle form submission for editing batches
const handleEditFormSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  
  if (!editingBatch) return;
  
  // Convert form data to proper types
  const startDateObj = new Date(startDate);
  const incubationDays = selectedSpecies ? speciesData[selectedSpecies]?.incubationDays || 21 : 21;
  const expectedHatchDate = new Date(startDateObj);
  expectedHatchDate.setDate(startDateObj.getDate() + incubationDays);
  
  // Create updated batch
  const updatedBatch: EggBatch = {
    ...editingBatch,
    batchName: batchName,
    startDate: startDateObj.toISOString(),
    species: selectedSpecies,
    varieties: selectedBreeds,
    eggCount: parseInt(eggCount),
    notes: notes,
    temperature: temperature,
    humidity: humidity,
    expectedHatchDate: expectedHatchDate.toISOString(),
    daysRemaining: incubationDays,
    daysElapsed: Math.floor((expectedHatchDate.getTime() - startDateObj.getTime()) / (1000 * 60 * 60 * 24))
  };
  
  // Update batches
  const updatedBatches = batches.map(b => 
    b.id === editingBatch.id ? updatedBatch : b
  );
  setBatches(updatedBatches);
  
  // Update localStorage
  localStorage.setItem('incubationBatches', JSON.stringify(updatedBatches));
  
  // Reset form and close
  setShowEditForm(false);
  setEditingBatch(null);
  setBatchName('');
  setSelectedSpecies('Chicken');
  setSelectedBreeds([]);
  setEggCount('');
  setStartDate(format(new Date(), 'yyyy-MM-dd'));
  setNotes('');
  setTemperature(99.5);
  setHumidity(55);
};

  // Function to handle opening the edit form and populating it with batch data
  const handleEditButtonClick = (batch: EggBatch, e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    e.stopPropagation();
    // Set the editing batch and show the edit form
    setEditingBatch(batch);
    setShowEditForm(true);
    
    // Populate form fields with batch data
    setBatchName(batch.batchName);
    setSelectedSpecies(batch.species);
    setSelectedBreeds(batch.varieties);
    setEggCount(batch.eggCount.toString());
    setStartDate(format(new Date(batch.startDate), 'yyyy-MM-dd'));
    setNotes(batch.notes || '');
    setTemperature(batch.temperature);
    setHumidity(batch.humidity);

    // Scroll to the edit form
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };
  
  // Function to handle batch deletion
  const handleDeleteBatch = () => {
    if (deleteBatchId) {
      const newBatches = batches.filter(b => b.id !== deleteBatchId);
      setBatches(newBatches);
      // Also update localStorage
      localStorage.setItem('incubationBatches', JSON.stringify(newBatches));
      // Close the confirmation modal
      setShowDeleteConfirm(false);
      setDeleteBatchId(null);
    }
  };

  // Function to handle batch completion
  const handleCompleteBatch = () => {
    if (completeBatchId) {
      const newBatches = batches.map(b => 
        b.id === completeBatchId ? {...b, status: 'completed' as BatchStatus} : b
      );
      setBatches(newBatches);
      // Also update localStorage
      localStorage.setItem('incubationBatches', JSON.stringify(newBatches));
      // Close the confirmation modal
      setShowCompleteConfirm(false);
      setCompleteBatchId(null);
    }
  };



  // Component's return statement
  return (
    <div className="flex h-screen bg-gray-100">
      <DashboardSidebar />
      <div className="flex-1 overflow-auto">
        <DashboardHeader />
        <main className="p-6">
          <div className="mb-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-amber-800">Egg Batches</h2>
              <button
                onClick={() => setShowAddForm(true)}
                className="flex items-center bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                <PlusIcon className="h-5 w-5 mr-2" />
                Add Batch
              </button>
            </div>
            
            {/* Add Form */}
            {showAddForm && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6 border border-amber-100">
                <h3 className="text-xl font-semibold text-amber-700 mb-4">Add New Batch</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  
                  // Validate form
                  if (!batchName || !selectedSpecies || selectedBreeds.length === 0 || !eggCount || !startDate) {
                    alert('Please fill out all required fields');
                    return;
                  }
                  
                  // Convert form data to proper types
                  const startDateObj = new Date(startDate);
                  const incubationDays = speciesData[selectedSpecies]?.incubationDays || 21;
                  const expectedHatchDate = new Date(startDateObj);
                  expectedHatchDate.setDate(startDateObj.getDate() + incubationDays);
                  
                  // Create new batch
                  const newBatch: EggBatch = {
                    id: `batch-${Date.now()}`,
                    batchName: batchName,
                    startDate: startDateObj.toISOString(),
                    species: selectedSpecies,
                    varieties: selectedBreeds,
                    eggCount: parseInt(eggCount),
                    notes: notes,
                    status: 'incubating',
                    temperature: temperature,
                    humidity: humidity,
                    expectedHatchDate: expectedHatchDate.toISOString(),
                    daysRemaining: incubationDays,
                    lastTurned: new Date().toISOString(),
                    lastCandled: new Date().toISOString()
                  };
                  
                  // Add new batch to state
                  const updatedBatches = [...batches, newBatch];
                  setBatches(updatedBatches);
                  
                  // Update localStorage
                  localStorage.setItem('incubationBatches', JSON.stringify(updatedBatches));
                  
                  // Reset form and close
                  setShowAddForm(false);
                  setBatchName('');
                  setSelectedSpecies('Chicken');
                  setSelectedBreeds([]);
                  setEggCount('');
                  setStartDate(format(new Date(), 'yyyy-MM-dd'));
                  setNotes('');
                  setTemperature(99.5);
                  setHumidity(55);
                }}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    {/* Batch Name */}
                    <div>
                      <label htmlFor="batchName" className="block text-sm font-medium text-gray-700 mb-1">Batch Name</label>
                      <input
                        type="text"
                        id="batchName"
                        value={batchName}
                        onChange={(e) => setBatchName(e.target.value)}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      />
                    </div>
                    
                    {/* Start Date */}
                    <div>
                      <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                      <input
                        type="date"
                        id="startDate"
                        value={startDate}
                        onChange={(e) => setStartDate(e.target.value)}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      />
                    </div>
                    
                    {/* Species */}
                    <div>
                      <label htmlFor="species" className="block text-sm font-medium text-gray-700 mb-1">Species</label>
                      <select
                        id="species"
                        value={selectedSpecies}
                        onChange={(e) => {
                          const newSpecies = e.target.value as SpeciesType;
                          setSelectedSpecies(newSpecies);
                          setSelectedBreeds([]);
                          setTemperature(speciesData[newSpecies]?.temp || 99.5);
                          setHumidity(speciesData[newSpecies]?.humidity || 55);
                        }}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      >
                        <option value="">Select Species</option>
                        {Object.keys(speciesData).map(species => (
                          <option key={species} value={species}>{species}</option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Egg Count */}
                    <div>
                      <label htmlFor="eggCount" className="block text-sm font-medium text-gray-700 mb-1">Number of Eggs</label>
                      <input
                        type="number"
                        id="eggCount"
                        value={eggCount}
                        onChange={(e) => setEggCount(e.target.value)}
                        min="1"
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      />
                    </div>
                  </div>
                  
                  {/* Varieties/Breeds */}
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Breeds/Varieties</label>
                    <div className="border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto">
                      {selectedSpecies && speciesData[selectedSpecies]?.varieties.map(variety => (
                        <div key={variety} className="flex items-center mb-2">
                          <input
                            type="checkbox"
                            id={`variety-${variety}`}
                            checked={selectedBreeds.includes(variety)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedBreeds([...selectedBreeds, variety]);
                              } else {
                                setSelectedBreeds(selectedBreeds.filter(v => v !== variety));
                              }
                            }}
                            className="mr-2"
                          />
                          <label htmlFor={`variety-${variety}`} className="text-sm text-gray-700">{variety}</label>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  {/* Compatibility Warnings */}
                  {compatibilityWarnings.length > 0 && (
                    <div className="mb-4 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                      <h4 className="text-amber-800 font-medium mb-2">Compatibility Warnings</h4>
                      <ul className="list-disc pl-5 space-y-1">
                        {compatibilityWarnings.map((warning, index) => (
                          <li key={index} className={`text-sm ${warning.severity === 'error' ? 'text-red-600' : 'text-amber-700'}`}>
                            <span className="font-medium">{warning.pair}:</span> {warning.reason}
                            <p className="text-xs mt-1">{warning.recommendation}</p>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    {/* Temperature */}
                    <div>
                      <label htmlFor="temperature" className="block text-sm font-medium text-gray-700 mb-1">Temperature (°F)</label>
                      <input
                        type="number"
                        id="temperature"
                        value={temperature}
                        onChange={(e) => setTemperature(parseFloat(e.target.value))}
                        step="0.1"
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                    </div>
                    
                    {/* Humidity */}
                    <div>
                      <label htmlFor="humidity" className="block text-sm font-medium text-gray-700 mb-1">Humidity (%)</label>
                      <input
                        type="number"
                        id="humidity"
                        value={humidity}
                        onChange={(e) => setHumidity(parseFloat(e.target.value))}
                        min="0"
                        max="100"
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                    </div>
                  </div>
                  
                  {/* Notes */}
                  <div className="mb-4">
                    <label htmlFor="notes" className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea
                      id="notes"
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      rows={3}
                      className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                    ></textarea>
                  </div>
                  
                  <div className="flex justify-end space-x-2">
                    <button
                      type="button"
                      onClick={() => {
                        setShowAddForm(false);
                        setBatchName('');
                        setSelectedSpecies('Chicken');
                        setSelectedBreeds([]);
                        setEggCount('');
                        setStartDate(format(new Date(), 'yyyy-MM-dd'));
                        setNotes('');
                        setTemperature(99.5);
                        setHumidity(55);
                      }}
                      className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className="px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors"
                    >
                      Add Batch
                    </button>
                  </div>
                </form>
              </div>
            )}
            
            {/* Edit Form */}
            {showEditForm && editingBatch && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6 border border-amber-100">
                <h3 className="text-xl font-semibold text-amber-700 mb-4">Edit Batch</h3>
                <form onSubmit={handleEditFormSubmit}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    {/* Batch Name */}
                    <div>
                      <label htmlFor="edit-batchName" className="block text-sm font-medium text-gray-700 mb-1">Batch Name</label>
                      <input
                        type="text"
                        id="edit-batchName"
                        value={batchName}
                        onChange={(e) => setBatchName(e.target.value)}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      />
                    </div>
                    
                    {/* Start Date */}
                    <div>
                      <label htmlFor="edit-startDate" className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                      <input
                        type="date"
                        id="edit-startDate"
                        value={startDate}
                        onChange={(e) => setStartDate(e.target.value)}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      />
                    </div>
                    
                    {/* Species */}
                    <div>
                      <label htmlFor="edit-species" className="block text-sm font-medium text-gray-700 mb-1">Species</label>
                      <select
                        id="edit-species"
                        value={selectedSpecies}
                        onChange={(e) => {
                          const newSpecies = e.target.value as SpeciesType;
                          setSelectedSpecies(newSpecies);
                          setSelectedBreeds([]);
                          setTemperature(speciesData[newSpecies]?.temp || 99.5);
                          setHumidity(speciesData[newSpecies]?.humidity || 55);
                        }}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      >
                        <option value="">Select Species</option>
                        {Object.keys(speciesData).map(species => (
                          <option key={species} value={species}>{species}</option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Egg Count */}
                    <div>
                      <label htmlFor="edit-eggCount" className="block text-sm font-medium text-gray-700 mb-1">Number of Eggs</label>
                      <input
                        type="number"
                        id="edit-eggCount"
                        value={eggCount}
                        onChange={(e) => setEggCount(e.target.value)}
                        min="1"
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                        required
                      />
                    </div>

                    {/* Temperature */}
                    <div>
                      <label htmlFor="edit-temperature" className="block text-sm font-medium text-gray-700 mb-1">Temperature (°F)</label>
                      <input
                        type="number"
                        id="edit-temperature"
                        value={temperature}
                        onChange={(e) => setTemperature(parseFloat(e.target.value))}
                        step="0.1"
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                    </div>
                    
                    {/* Humidity */}
                    <div>
                      <label htmlFor="edit-humidity" className="block text-sm font-medium text-gray-700 mb-1">Humidity (%)</label>
                      <input
                        type="number"
                        id="edit-humidity"
                        value={humidity}
                        onChange={(e) => setHumidity(parseFloat(e.target.value))}
                        step="1"
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                      />
                    </div>
                  </div>
                  
                  {/* Varieties/Breeds */}
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Breeds/Varieties</label>
                    <div className="border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto">
                      {selectedSpecies && speciesData[selectedSpecies]?.varieties.map(variety => (
                        <div key={variety} className="flex items-center mb-2">
                          <input
                            type="checkbox"
                            id={`edit-variety-${variety}`}
                            checked={selectedBreeds.includes(variety)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedBreeds([...selectedBreeds, variety]);
                              } else {
                                setSelectedBreeds(selectedBreeds.filter(v => v !== variety));
                              }
                            }}
                            className="mr-2"
                          />
                          <label htmlFor={`edit-variety-${variety}`} className="text-sm text-gray-700">{variety}</label>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Notes */}
                  <div className="mb-4">
                    <label htmlFor="edit-notes" className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea
                      id="edit-notes"
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      rows={3}
                      className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                    ></textarea>
                  </div>
                  <div className="flex justify-end mt-6 space-x-2">
                    <button
                      type="button"
                      onClick={() => {
                        setShowEditForm(false);
                        setEditingBatch(null);
                      }}
                      className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      className="px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors"
                    >
                      Save Changes
                    </button>
                  </div>
                </form>
              </div>
            )}
            
            {/* Batch List */}
            {batches.map(batch => (
              <div key={batch.id} className="bg-white bg-opacity-90 backdrop-blur-sm rounded-2xl shadow-lg border border-white border-opacity-30 overflow-hidden mb-4">
                <div className="p-6">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-lg font-semibold text-amber-700">{batch.batchName}</h3>
                      <p className="text-amber-600">{batch.species} • {batch.eggCount} eggs</p>
                    </div>
                    <div className="flex space-x-2">
                      <button
                        onClick={(e) => handleEditButtonClick(batch, e)}
                        className="p-2 text-amber-600 hover:text-amber-800 hover:bg-amber-50 rounded-full transition-colors"
                        title="Edit batch"
                        type="button"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                      </button>
                      <button
                        onClick={(e) => handleDeleteButtonClick(batch.id, e)}
                        className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-full transition-colors"
                        title="Delete batch"
                        type="button"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                      </button>
                      {batch.status === 'incubating' && (
                        <button
                          onClick={(e) => handleCompleteButtonClick(batch.id, e)}
                          className="p-2 text-green-600 hover:text-green-800 hover:bg-green-50 rounded-full transition-colors"
                          title="Mark as completed"
                          type="button"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                        </button>
                      )}
                    </div>
                  </div>
                  
                  <div className="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <p className="text-sm text-amber-600">Start Date</p>
                      <p className="font-medium text-amber-900">{format(new Date(batch.startDate), 'MMM d, yyyy')}</p>
                    </div>
                    <div>
                      <p className="text-sm text-amber-600">Expected Hatch</p>
                      <p className="font-medium text-amber-900">{format(new Date(batch.expectedHatchDate), 'MMM d, yyyy')}</p>
                    </div>
                    <div>
                      <p className="text-sm text-amber-600">Temperature</p>
                      <p className="font-medium text-amber-900">{batch.temperature}°F</p>
                    </div>
                    <div>
                      <p className="text-sm text-amber-600">Humidity</p>
                      <p className="font-medium text-amber-900">{batch.humidity}%</p>
                    </div>
                  </div>
                  
                  {batch.status === 'completed' && (
                    <div className="mt-4 bg-green-50 p-3 rounded-lg border border-green-200 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                      <div>
                        <p className="text-green-700 font-medium">
                          Batch completed
                        </p>
                      </div>
                    </div>
                  )}
                  
                  {batch.status === 'incubating' && (
                    <div className="mt-4 space-y-3">
                      <div className="bg-amber-50 p-3 rounded-lg border border-amber-200 flex items-center">
                        <ClockIcon className="h-5 w-5 text-amber-600 mr-2" />
                        <div>
                          <p className="text-amber-700 font-medium">
                            {batch.daysRemaining} days remaining
                          </p>
                        </div>
                      </div>
                      
                      {/* Incubation Progress Bar */}
                      <div className="space-y-2 bg-gradient-to-r from-amber-50 to-amber-100 p-4 rounded-xl border border-amber-200 shadow-sm">
                        <div className="flex justify-between items-center mb-1">
                          <h4 className="font-medium text-amber-800">Incubation Timeline</h4>
                          <div className="text-amber-700 text-sm font-medium bg-white px-2 py-1 rounded-full border border-amber-200 shadow-sm">
                            {(() => {
                              const speciesData = {
                                "Chicken": { days: 21 },
                                "Duck": { days: 28 },
                                "Goose": { days: 30 },
                                "Turkey": { days: 28 },
                                "Quail": { days: 18 }
                              };
                              const totalDays = speciesData[batch.species]?.days || 21;
                              // Use the pre-calculated daysElapsed from the batch object if available
                              const daysElapsed = batch.daysElapsed !== undefined ? batch.daysElapsed : 
                                Math.max(0, Math.min(totalDays, totalDays - batch.daysRemaining));
                              return `Day ${daysElapsed + 1} of ${totalDays}`;
                            })()}
                          </div>
                        </div>
                        
                        <div className="flex justify-between items-center text-xs text-amber-700 px-1">
                          {(() => {
                            // Calculate progress based on start date and species incubation period
                            const speciesData = {
                              "Chicken": { days: 21, turnUntil: 18 },
                              "Duck": { days: 28, turnUntil: 25 },
                              "Goose": { days: 30, turnUntil: 27 },
                              "Turkey": { days: 28, turnUntil: 25 },
                              "Quail": { days: 18, turnUntil: 15 }
                            };
                            
                            const totalDays = speciesData[batch.species]?.days || 21;
                            const turnUntilDay = speciesData[batch.species]?.turnUntil || 18;
                            // Use the pre-calculated daysElapsed from the batch object if available
                            const daysElapsed = batch.daysElapsed !== undefined ? batch.daysElapsed : 
                              Math.max(0, Math.min(totalDays, totalDays - batch.daysRemaining));
                            const currentDay = daysElapsed + 1;
                            const lockdownDay = turnUntilDay + 1;
                            
                            // Calculate days until each phase
                            const daysUntilLockdown = Math.max(0, lockdownDay - currentDay);
                            const daysUntilHatch = Math.max(0, totalDays - currentDay + 1);
                            
                            return (
                              <>
                                <div className="flex flex-col items-center">
                                  <div className={`w-2 h-2 rounded-full ${currentDay === 1 ? 'bg-amber-400 ring-2 ring-amber-300' : 'bg-amber-400'} mb-1`}></div>
                                  <span>Start</span>
                                  <span className="mt-1 font-medium">Day 1</span>
                                </div>
                                <div className="flex flex-col items-center">
                                  <div className={`w-2 h-2 rounded-full ${currentDay > 1 && currentDay <= turnUntilDay ? 'bg-amber-500 ring-2 ring-amber-300' : 'bg-amber-500'} mb-1`}></div>
                                  <span>Turning</span>
                                  <span className="mt-1 font-medium">Until Day {turnUntilDay}</span>
                                </div>
                                <div className="flex flex-col items-center">
                                  <div className={`w-2 h-2 rounded-full ${currentDay > turnUntilDay && currentDay < totalDays ? 'bg-amber-600 ring-2 ring-amber-300' : 'bg-amber-600'} mb-1`}></div>
                                  <span>Lockdown</span>
                                  <span className="mt-1 font-medium">
                                    {currentDay < lockdownDay ? `In ${daysUntilLockdown} days` : currentDay >= lockdownDay && currentDay < totalDays ? 'Active' : 'Complete'}
                                  </span>
                                </div>
                                <div className="flex flex-col items-center">
                                  <div className={`w-2 h-2 rounded-full ${currentDay >= totalDays ? 'bg-amber-700 ring-2 ring-amber-300' : 'bg-amber-700'} mb-1`}></div>
                                  <span>Hatch</span>
                                  <span className="mt-1 font-medium">
                                    {currentDay < totalDays ? `In ${daysUntilHatch} days` : 'Today!'}
                                  </span>
                                </div>
                              </>
                            );
                          })()}
                        </div>
                        
                        <div className="relative h-5 bg-white rounded-full overflow-hidden shadow-inner border border-amber-200">
                          {/* Calculate progress percentage based on species and days */}
                          {(() => {
                            const speciesData = {
                              "Chicken": { days: 21, turnUntil: 18 },
                              "Duck": { days: 28, turnUntil: 25 },
                              "Goose": { days: 30, turnUntil: 27 },
                              "Turkey": { days: 28, turnUntil: 25 },
                              "Quail": { days: 18, turnUntil: 15 }
                            };
                            
                            const totalDays = speciesData[batch.species]?.days || 21;
                            const turnUntilDay = speciesData[batch.species]?.turnUntil || 18;
                            
                            // Use the pre-calculated daysElapsed from the batch object
                            // This ensures consistency with the days remaining calculation
                            const daysElapsed = batch.daysElapsed !== undefined ? batch.daysElapsed : 
                              Math.max(0, Math.min(totalDays, totalDays - batch.daysRemaining));
                            const progress = Math.min(100, Math.max(0, (daysElapsed / totalDays) * 100));
                            
                            // Calculate milestone positions
                            const turnUntilPosition = (turnUntilDay / totalDays) * 100;
                            const lockdownPosition = ((totalDays - 3) / totalDays) * 100;
                            
                            return (
                              <>
                                {/* Main progress bar with gradient based on phase */}
                                <div 
                                  className={`absolute left-0 top-0 h-full transition-all duration-500 ease-out ${progress < turnUntilPosition ? 'bg-gradient-to-r from-amber-400 to-amber-500' : progress < lockdownPosition ? 'bg-gradient-to-r from-amber-500 to-amber-600' : 'bg-gradient-to-r from-amber-600 to-amber-700'}`}
                                  style={{ width: `${batch.status === 'incubating' ? progress : 0}%` }}
                                ></div>
                                
                                {/* Milestone markers with tooltips */}
                                <div className="absolute top-0 h-full w-full">
                                  {/* Turning phase end marker */}
                                  <div className="group relative">
                                    <div 
                                      className="absolute top-0 h-full border-l-2 border-amber-600 z-10" 
                                      style={{ left: `${turnUntilPosition}%` }}
                                    ></div>
                                    <div 
                                      className="absolute bottom-full mb-1 left-0 transform -translate-x-1/2 hidden group-hover:block bg-amber-600 text-white text-xs py-1 px-2 rounded pointer-events-none whitespace-nowrap z-20"
                                      style={{ left: `${turnUntilPosition}%` }}
                                    >
                                      Stop turning on day {turnUntilDay}
                                    </div>
                                  </div>
                                  
                                  {/* Lockdown marker */}
                                  <div className="group relative">
                                    <div 
                                      className="absolute top-0 h-full border-l-2 border-amber-800 z-10" 
                                      style={{ left: `${lockdownPosition}%` }}
                                    ></div>
                                    <div 
                                      className="absolute bottom-full mb-1 left-0 transform -translate-x-1/2 hidden group-hover:block bg-amber-800 text-white text-xs py-1 px-2 rounded pointer-events-none whitespace-nowrap z-20"
                                      style={{ left: `${lockdownPosition}%` }}
                                    >
                                      Lockdown on day {totalDays - 3}
                                    </div>
                                  </div>
                                </div>
                                
                                {/* Current day indicator with pulsing effect */}
                                {batch.status === 'incubating' && (
                                  <div 
                                    className="absolute top-0 h-full z-10" 
                                    style={{ left: `${progress}%` }}
                                  >
                                    <div className="absolute top-1/2 transform -translate-y-1/2 -ml-2.5">
                                      <div className="h-5 w-5 bg-white border-2 border-amber-600 rounded-full shadow-md flex items-center justify-center animate-pulse">
                                        <div className="h-2 w-2 bg-amber-600 rounded-full"></div>
                                      </div>
                                    </div>
                                  </div>
                                )}
                                
                                {/* Status display for non-incubating batches */}
                                {batch.status !== 'incubating' && (
                                  <div className="absolute inset-0 flex items-center justify-center text-xs font-medium">
                                    {batch.status === 'completed' ? (
                                      <span className="text-green-700 bg-green-50 px-2 py-1 rounded-full border border-green-200">
                                        Completed
                                      </span>
                                    ) : batch.status === 'hatched' ? (
                                      <span className="text-amber-700 bg-amber-50 px-2 py-1 rounded-full border border-amber-200">
                                        Hatched
                                      </span>
                                    ) : (
                                      <span className="text-red-700 bg-red-50 px-2 py-1 rounded-full border border-red-200">
                                        Failed
                                      </span>
                                    )}
                                  </div>
                                )}
                              </>
                            );
                          })()}
                        </div>
                        
                        {/* Handling instructions based on current phase */}
                        {(() => {
                          if (batch.status !== 'incubating') {
                            return null; // Don't show instructions for non-incubating batches
                          }
                          
                          const speciesData = {
                            "Chicken": { days: 21, turnUntil: 18 },
                            "Duck": { days: 28, turnUntil: 25 },
                            "Goose": { days: 30, turnUntil: 27 },
                            "Turkey": { days: 28, turnUntil: 25 },
                            "Quail": { days: 18, turnUntil: 15 }
                          };
                          
                          const totalDays = speciesData[batch.species]?.days || 21;
                          const turnUntilDay = speciesData[batch.species]?.turnUntil || 18;
                          
                          // Use the pre-calculated daysElapsed from the batch object if available
                          const daysElapsed = batch.daysElapsed !== undefined ? batch.daysElapsed : 
                            Math.max(0, Math.min(totalDays, totalDays - batch.daysRemaining));
                          
                          let instructions = "";
                          let bgColor = "bg-amber-50";
                          let textColor = "text-amber-800";
                          let borderColor = "border-amber-200";
                          
                          if (daysElapsed < 7) {
                            // First week
                            instructions = "Turn eggs 3-5 times daily. Maintain temperature and humidity carefully during this critical period.";
                          } else if (daysElapsed < turnUntilDay) {
                            // Middle period
                            instructions = "Continue turning eggs 3 times daily. Candle eggs to check development and remove any clear (infertile) eggs.";
                          } else if (daysElapsed < totalDays - 1) {
                            // Lockdown period
                            instructions = "LOCKDOWN PHASE: Stop turning eggs. Increase humidity to 65-70%. Minimize opening incubator.";
                            bgColor = "bg-amber-100";
                            borderColor = "border-amber-400";
                            textColor = "text-amber-900";
                          } else {
                            // Hatching imminent
                            instructions = "HATCHING IMMINENT: Eggs may begin pipping. Do not open incubator. Maintain high humidity.";
                            bgColor = "bg-amber-200";
                            borderColor = "border-amber-500";
                            textColor = "text-amber-900 font-medium";
                          }
                          
                          return (
                            <div className={`mt-2 p-2 rounded-lg ${bgColor} ${textColor} text-sm border ${borderColor}`}>
                              <p>{instructions}</p>
                            </div>
                          );
                        })()}
                      </div>
                    </div>
                  )}
                </div>
              </div>
          ))}
        </div>
      </main>
    </div>

    {/* Delete Confirmation Modal */}
    {showDeleteConfirm && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <h3 className="text-xl font-semibold text-gray-800 mb-4">Confirm Deletion</h3>
          <p className="text-gray-600 mb-6">Are you sure you want to delete this batch? This action cannot be undone.</p>
          <div className="flex justify-end space-x-3">
            <button
              onClick={() => {
                setShowDeleteConfirm(false);
                setDeleteBatchId(null);
              }}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleDeleteBatch}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              Delete
            </button>
          </div>
        </div>
      </div>
    )}

    {/* Complete Confirmation Modal */}
    {showCompleteConfirm && (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <h3 className="text-xl font-semibold text-gray-800 mb-4">Confirm Completion</h3>
          <p className="text-gray-600 mb-6">Mark this batch as completed? This will move it to the completed state.</p>
          <div className="flex justify-end space-x-3">
            <button
              onClick={() => {
                setShowCompleteConfirm(false);
                setCompleteBatchId(null);
              }}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleCompleteBatch}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              Complete
            </button>
          </div>
        </div>
      </div>
    )}
        </main>
      </div>
    </div>
  );
}
